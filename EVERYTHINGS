
	

/*---------------------------AGREGATE FUNCTIONS---------------------------*/



8) Implement the aggregation and indexing with suitable example in MongoDB. Demonstrate
the following:
	

// Sum fuction

> db.student.aggregate([{$group: { _id:"$name",total:{$sum : 1 }}}])
{ "_id" : "malpure", "total" : 2 }
{ "_id" : "varad", "total" : 2 }
{ "_id" : "bodhe", "total" : 2 }	
{ "_id" : "rutvij", "total" : 4 }

// Average Function

> db.student.aggregate([{$group: { _id:"$name",total:{$avg : "$marks" }}}])
{ "_id" : "malpure", "total" : 80 }
{ "_id" : "varad", "total" : 130 }
{ "_id" : "bodhe", "total" : 80 }
{ "_id" : "rutvij", "total" : 110 }


//Min function

> db.student.aggregate([{$group: { _id:"$name",total:{$min : "$marks" }}}])
{ "_id" : "malpure", "total" : 30 }
{ "_id" : "varad", "total" : 80 }
{ "_id" : "bodhe", "total" : 30 }
{ "_id" : "rutvij", "total" : 80 }

//Max function
 
> db.student.aggregate([{$group: { _id:"$name",total:{$max : "$marks" }}}])
{ "_id" : "malpure", "total" : 130 }
{ "_id" : "varad", "total" : 180 }
{ "_id" : "bodhe", "total" : 130 }
{ "_id" : "rutvij", "total" : 180 }

//Aggregate Framework


//sort (sorts the files  1 : ascending , -1 : descending )

> db.student.aggregate([{$sort:{marks:1}}])
{ "_id" : ObjectId("5bd2aebcefabf01818bf446b"), "name" : "bodhe", "marks" : 30, "status" : "absent" }
{ "_id" : ObjectId("5bd2aec9efabf01818bf446c"), "name" : "malpure", "marks" : 30, "status" : "present" }
{ "_id" : ObjectId("5bd2ae92efabf01818bf4467"), "name" : "rutvij", "marks" : 80, "status" : "present" }
{ "_id" : ObjectId("5bd2ae97efabf01818bf4468"), "name" : "rutvij", "marks" : 80, "status" : "absent" }
{ "_id" : ObjectId("5bd2ae9eefabf01818bf4469"), "name" : "varad", "marks" : 80, "status" : "absent" }
{ "_id" : ObjectId("5bd2ae84efabf01818bf4465"), "name" : "rutvij", "marks" : 100, "status" : "present" }
{ "_id" : ObjectId("5bd2aed3efabf01818bf446d"), "name" : "malpure", "marks" : 130, "status" : "absent" }
{ "_id" : ObjectId("5bd2aee0efabf01818bf446e"), "name" : "bodhe", "marks" : 130, "status" : "present" }
{ "_id" : ObjectId("5bd2ae8defabf01818bf4466"), "name" : "rutvij", "marks" : 180, "status" : "present" }
{ "_id" : ObjectId("5bd2aea7efabf01818bf446a"), "name" : "varad", "marks" : 180, "status" : "present" }


//match  it displays the documents with matching query

> db.student.aggregate(
... [
... {
... $match:{name:"rutvij"}
... }
... ]
... )
{ "_id" : ObjectId("5bd2ae84efabf01818bf4465"), "name" : "rutvij", "marks" : 100, "status" : "present" }
{ "_id" : ObjectId("5bd2ae8defabf01818bf4466"), "name" : "rutvij", "marks" : 180, "status" : "present" }
{ "_id" : ObjectId("5bd2ae92efabf01818bf4467"), "name" : "rutvij", "marks" : 80, "status" : "present" }
{ "_id" : ObjectId("5bd2ae97efabf01818bf4468"), "name" : "rutvij", "marks" : 80, "status" : "absent" }


//Skip  it skips document from start


> db.student.aggregate( [ { $skip:3 } ] )
{ "_id" : ObjectId("5bd2ae97efabf01818bf4468"), "name" : "rutvij", "marks" : 80, "status" : "absent" }
{ "_id" : ObjectId("5bd2ae9eefabf01818bf4469"), "name" : "varad", "marks" : 80, "status" : "absent" }
{ "_id" : ObjectId("5bd2aea7efabf01818bf446a"), "name" : "varad", "marks" : 180, "status" : "present" }
{ "_id" : ObjectId("5bd2aebcefabf01818bf446b"), "name" : "bodhe", "marks" : 30, "status" : "absent" }
{ "_id" : ObjectId("5bd2aec9efabf01818bf446c"), "name" : "malpure", "marks" : 30, "status" : "present" }
{ "_id" : ObjectId("5bd2aed3efabf01818bf446d"), "name" : "malpure", "marks" : 130, "status" : "absent" }
{ "_id" : ObjectId("5bd2aee0efabf01818bf446e"), "name" : "bodhe", "marks" : 130, "status" : "present" }

> db.student.aggregate( [ { $skip:4 } ] )
{ "_id" : ObjectId("5bd2ae9eefabf01818bf4469"), "name" : "varad", "marks" : 80, "status" : "absent" }
{ "_id" : ObjectId("5bd2aea7efabf01818bf446a"), "name" : "varad", "marks" : 180, "status" : "present" }
{ "_id" : ObjectId("5bd2aebcefabf01818bf446b"), "name" : "bodhe", "marks" : 30, "status" : "absent" }
{ "_id" : ObjectId("5bd2aec9efabf01818bf446c"), "name" : "malpure", "marks" : 30, "status" : "present" }
{ "_id" : ObjectId("5bd2aed3efabf01818bf446d"), "name" : "malpure", "marks" : 130, "status" : "absent" }
{ "_id" : ObjectId("5bd2aee0efabf01818bf446e"), "name" : "bodhe", "marks" : 130, "status" : "present" }

====================================================================================================================================================================================
6)Explain MapReduce in MongoDB with suitable example.(use various aggregate
functions)

mongo --host 127.0.0.1



>db.createCollection('student')



> db.student.insert({name:'rutvij',marks:100,status:'present'})
WriteResult({ "nInserted" : 1 })
> db.student.insert({name:'rutvij',marks:80,status:'present'})
WriteResult({ "nInserted" : 1 })
> db.student.insert({name:'rutvij',marks:70,status:'present'})
WriteResult({ "nInserted" : 1 })
> db.student.insert({name:'rutvij',marks:35,status:'absent'})
WriteResult({ "nInserted" : 1 })
> db.student.insert({name:'varad',marks:35,status:'absent'})
WriteResult({ "nInserted" : 1 })
> db.student.insert({name:'varad',marks:100,status:'present'})
WriteResult({ "nInserted" : 1 })
> db.student.insert({name:'varad',marks:600,status:'present'})
WriteResult({ "nInserted" : 1 })
> db.student.insert({name:'varad',marks:60,status:'present'})
WriteResult({ "nInserted" : 1 })
> db.student.insert({name:'bodhe',marks:20,status:'absent'})
WriteResult({ "nInserted" : 1 })
> db.student.insert({name:'bodhe',marks:70,status:'present'})
WriteResult({ "nInserted" : 1 })
> db.student.insert({name:'bodhe',marks:90,status:'present'})
WriteResult({ "nInserted" : 1 })
> db.student.insert({name:'malpure',marks:90,status:'present'})
WriteResult({ "nInserted" : 1 })
> db.student.insert({name:'malpure',marks:80,status:'absent'})
WriteResult({ "nInserted" : 1 })



> db.student.find().pretty()
{
	"_id" : ObjectId("5bd2ae84efabf01818bf4465"),
	"name" : "rutvij",
	"marks" : 100,
	"status" : "present"
}
{
	"_id" : ObjectId("5bd2ae8defabf01818bf4466"),
	"name" : "rutvij",
	"marks" : 180,
	"status" : "present"
}
{
	"_id" : ObjectId("5bd2ae92efabf01818bf4467"),
	"name" : "rutvij",
	"marks" : 80,
	"status" : "present"
}
{
	"_id" : ObjectId("5bd2ae97efabf01818bf4468"),
	"name" : "rutvij",
	"marks" : 80,
	"status" : "absent"
}
{
	"_id" : ObjectId("5bd2ae9eefabf01818bf4469"),
	"name" : "varad",
	"marks" : 80,
	"status" : "absent"
}
{
	"_id" : ObjectId("5bd2aea7efabf01818bf446a"),
	"name" : "varad",
	"marks" : 180,
	"status" : "present"
}
{
	"_id" : ObjectId("5bd2aebcefabf01818bf446b"),
	"name" : "bodhe",
	"marks" : 30,
	"status" : "absent"
}
{
	"_id" : ObjectId("5bd2aec9efabf01818bf446c"),
	"name" : "malpure",
	"marks" : 30,
	"status" : "present"
}
{
	"_id" : ObjectId("5bd2aed3efabf01818bf446d"),
	"name" : "malpure",
	"marks" : 130,
	"status" : "absent"
}
{
	"_id" : ObjectId("5bd2aee0efabf01818bf446e"),
	"name" : "bodhe",
	"marks" : 130,
	"status" : "present"
}




> var map = function(){
... emit(this.name,this.marks);
... }


> map
function (){
emit(this.name,this.marks);
}



> var reduce=function(key,marks){
... return Array.sum(marks);
... }


> reduce
function (key,marks){
return Array.sum(marks);
}


> db.student.mapReduce(map,reduce,{out:'total_marks'})
{
	"result" : "total_marks",
	"timeMillis" : 88,
	"counts" : {
		"input" : 10,
		"emit" : 10,
		"reduce" : 4,
		"output" : 4
	},
	"ok" : 1
}


> db.total_marks.find().pretty()
{ "_id" : "bodhe", "value" : 160 }
{ "_id" : "malpure", "value" : 160 }
{ "_id" : "rutvij", "value" : 440 }
{ "_id" : "varad", "value" : 260 }


> db.student.mapReduce(map,reduce,{query:{status:'absent'},out:'absent_marks'})
{
	"result" : "absent_marks",
	"timeMillis" : 45,
	"counts" : {
		"input" : 4,
		"emit" : 4,
		"reduce" : 0,
		"output" : 4
	},
	"ok" : 1
}



> db.absent_marks.find().pretty()
{ "_id" : "bodhe", "value" : 30 }
{ "_id" : "malpure", "value" : 130 }
{ "_id" : "rutvij", "value" : 80 }
{ "_id" : "varad", "value" : 80 }





=============================================================================================================	
ASSIGNMENT 8 (index)
the indexes.
Create ad drop different types of indexes and explain () to show the advantage of



db.createCollection('patients')
{ "ok" : 1 }
> 
> 
> db.patients.insert({pno:1,name:'rutvij',phno:8308487025,age:20,address:'kothrud',disease:'fever',doc:'sathe'})
WriteResult({ "nInserted" : 1 })
> db.patients.insert({pno:2,name:'amogh',phno:9881179481,age:21,address:'kothrud',disease:'cough',doc:'sathe'})
WriteResult({ "nInserted" : 1 })
> db.patients.insert({pno:3,name:'rajapure',phno:9881179481,age:20,address:'dhankawdi',disease:'piles',doc:'patil'})
WriteResult({ "nInserted" : 1 })
> db.patients.insert({pno:4,name:'sanul',phno:9881179482,age:20,address:'viit',disease:'piles',doc:'patil'})
WriteResult({ "nInserted" : 1 })
> 
> db.patients.insert({pno:5,name:'rutvij',phno:9881179483,age:20,address:'viit',disease:'heart_attack',doc:'ranade'})
WriteResult({ "nInserted" : 1 })
> 
> db.patients.find()
{ "_id" : ObjectId("5bd2e44b8515ef3f80edf328"), "pno" : 1, "name" : "rutvij", "phno" : 8308487025, "age" : 20, "address" : "kothrud", "disease" : "fever", "doc" : "sathe" }
{ "_id" : ObjectId("5bd2e4c38515ef3f80edf329"), "pno" : 2, "name" : "amogh", "phno" : 9881179481, "age" : 21, "address" : "kothrud", "disease" : "cough", "doc" : "sathe" }
{ "_id" : ObjectId("5bd2e4e78515ef3f80edf32a"), "pno" : 3, "name" : "rajapure", "phno" : 9881179481, "age" : 20, "address" : "dhankawdi", "disease" : "piles", "doc" : "patil" }
{ "_id" : ObjectId("5bd2e5008515ef3f80edf32b"), "pno" : 4, "name" : "sanul", "phno" : 9881179482, "age" : 20, "address" : "viit", "disease" : "piles", "doc" : "patil" }
{ "_id" : ObjectId("5bd2e59e8515ef3f80edf32c"), "pno" : 5, "name" : "rutvij", "phno" : 9881179483, "age" : 20, "address" : "viit", "disease" : "heart_attack", "doc" : "ranade" }
> db.patients.find().pretty()
{
	"_id" : ObjectId("5bd2e44b8515ef3f80edf328"),
	"pno" : 1,
	"name" : "rutvij",
	"phno" : 8308487025,
	"age" : 20,
	"address" : "kothrud",
	"disease" : "fever",
	"doc" : "sathe"
}
{
	"_id" : ObjectId("5bd2e4c38515ef3f80edf329"),
	"pno" : 2,
	"name" : "amogh",
	"phno" : 9881179481,
	"age" : 21,
	"address" : "kothrud",
	"disease" : "cough",
	"doc" : "sathe"
}
{
	"_id" : ObjectId("5bd2e4e78515ef3f80edf32a"),
	"pno" : 3,
	"name" : "rajapure",
	"phno" : 9881179481,
	"age" : 20,
	"address" : "dhankawdi",
	"disease" : "piles",
	"doc" : "patil"
}
{
	"_id" : ObjectId("5bd2e5008515ef3f80edf32b"),
	"pno" : 4,
	"name" : "sanul",
	"phno" : 9881179482,
	"age" : 20,
	"address" : "viit",
	"disease" : "piles",
	"doc" : "patil"
}
{
	"_id" : ObjectId("5bd2e59e8515ef3f80edf32c"),
	"pno" : 5,
	"name" : "rutvij",
	"phno" : 9881179483,
	"age" : 20,
	"address" : "viit",
	"disease" : "heart_attack",
	"doc" : "ranade"
}


> db.patients.createIndex({pno:1})   		//simple index
{
	"createdCollectionAutomatically" : false,
	"numIndexesBefore" : 1,
	"numIndexesAfter" : 2,
	"ok" : 1
}


> db.patients.createIndex({pno:1},{unique:false})			//uniques means no duplicate or repeated record
{
	"createdCollectionAutomatically" : false,
	"numIndexesBefore" : 2,
	"numIndexesAfter" : 2,
	"note" : "all indexes already exist",
	"ok" : 1
}


> db.patients.createIndex({age:-1,phno:1})    //compound index
{
	"createdCollectionAutomatically" : false,
	"numIndexesBefore" : 2,
	"numIndexesAfter" : 3,
	"ok" : 1
}

> db.patients.getIndexes()
[
	{
		"v" : 2,
		"key" : {
			"_id" : 1
		},
		"name" : "_id_",
		"ns" : "hospital.patients"
	},
	{
		"v" : 2,
		"key" : {
			"pno" : 1
		},
		"name" : "pno_1",
		"ns" : "hospital.patients"
	},
	{
		"v" : 2,
		"key" : {
			"age" : -1,
			"phno" : 1
		},
		"name" : "age_-1_phno_1",
		"ns" : "hospital.patients"
	}
]---------------------------------------------------------------------------------------------------------------------------------------------------------------]
ASSIGNMENT 4

1)  Find the name, loan number and loan amount of all customers having a loan at the
SBI branch.



mysql> select Borrower.Customer_name,Borrower.Loan_number,Loan.amount
    -> from Borrower,Loan
    -> where Loan.Branch_name='SBI' AND Borrower.Loan_number = Loan.Loan_number;
+---------------+-------------+--------+
| Customer_name | Loan_number | amount |
+---------------+-------------+--------+
| rutvij        |         100 |   1000 |	
| ambuj         |         101 |  10000 |
| sourabh       |         102 |   2000 |
+---------------+-------------+--------+
3 rows in set (0.00 sec)



2) Find the customer names and their loan numbers for all customers having a loan at
some branch.




mysql> select Borrower.Customer_name,Borrower.Loan_number,Loan.Branch_name
    -> from Borrower,Loan
    -> where Borrower.Loan_number = Loan.Loan_number;
+---------------+-------------+-------------+
| Customer_name | Loan_number | Branch_name |
+---------------+-------------+-------------+
| rutvij        |         100 | SBI         |
| ambuj         |         101 | SBI         |
| sourabh       |         102 | SBI         |
+---------------+-------------+-------------+
3 rows in set (0.00 sec)




3)Find the names of all customers whose street includes the substring “kondhawa”.

mysql> select Customer_name,Customer_street 
    -> from Customer
    -> where LOCATE('kondhawa',Customer_street) != 0;     		// LOCATE RETURNS 0 IF SUBSTRING NOT FOUND LOCATE(SUBSTRING , STRING , START_POSITION(optional) )
+---------------+-----------------+
| Customer_name | Customer_street |
+---------------+-----------------+
| ambuj         | kondhawa        |
+---------------+-----------------+
1 row in set (0.00 sec)




4)List in alphabetic order the names of all customers and amount in descending
order having a loan in SBI branch


mysql> select Borrower.Customer_name,Loan.amount
    -> from Borrower,Loan
    -> where Borrower.Loan_number = Loan.Loan_number AND Loan.Branch_name = 'SBI'
    -> ORDER BY Borrower.Customer_name ASC , Loan.amount DESC;



+---------------+--------+
| Customer_name | amount |
+---------------+--------+
| ambuj         |  10000 |
| rutvij        |   1000 |
| sourabh       |   2000 |
+---------------+--------+
3 rows in set (0.00 sec)


5) Find all customers who have a loan, an account, or both(using set operation)

mysql> select Depositor.Customer_name from Depositor
    -> Union all 						//display Duplicate entries too
    -> select Borrower.Customer_name from Borrower;

+---------------+
| Customer_name |
+---------------+
| ambuj         |
| ambuj         |
| rutvij        |
| rutvij        |
| sanul         |
| sanul         |
| sourabh       |
| ambuj         |
| rutvij        |
| sourabh       |
+---------------+
10 rows in set (0.00 sec)

mysql> select Depositor.Customer_name from Depositor
    -> Union 							//NO repeated or Duplicate Entries
    -> select Borrower.Customer_name from Borrower; 

+---------------+
| Customer_name |
+---------------+
| ambuj         |
| rutvij        |
| sanul         |
| sourabh       |
+---------------+
4 rows in set (0.00 sec)


6)Find the average account balance at the SBI branch.(Concentrate on NULL
values)

mysql> select AVG(balance)        //AVG function
    -> from Account
    -> where Branch_name = 'SBI';
+--------------+
| AVG(balance) |
+--------------+
|   22500.0000 |
+--------------+
1 row in set (0.00 sec)


7)Find the names of all branches where the average account balance is more than
Rs1,200.write by group by clause)

mysql> select Branch_name,AVG(balance) from Account GROUP BY Branch_name having AVG(balance) > 1200;
+-------------+--------------+
| Branch_name | AVG(balance) |
+-------------+--------------+
| Axis        |   60000.0000 |
| HDFC        |   30000.0000 |
| SBI         |   22500.0000 |
+-------------+--------------+
3 rows in set (0.00 sec)


8)Find all loan number which appear in the loan relation with null values for
amount and add 5 in null values.


// For this we need to INsert Null amount records in database

mysql> insert into Loan(Loan_number,Branch_name) values(103,'HDFC');
Query OK, 1 row affected (0.00 sec)

mysql> insert into Loan(Loan_number,Branch_name) values(104,'Axis');
Query OK, 1 row affected (0.01 sec)

mysql> select*from Loan;
+-------------+-------------+--------+
| Loan_number | Branch_name | amount |
+-------------+-------------+--------+
|         100 | SBI         |   1000 |
|         101 | SBI         |  10000 |
|         102 | SBI         |   2000 |
|         103 | HDFC        |   NULL |		//2 NUll amount records
|         104 | Axis        |   NULL |
+-------------+-------------+--------+
5 rows in set (0.00 sec)

mysql> select Loan_number,IFNULL(amount,5) from Loan where ISNULL(amount);
+-------------+------------------+
| Loan_number | IFNULL(amount,5) |
+-------------+------------------+
|         103 |                5 |
|         104 |                5 |
+-------------+------------------+
2 rows in set (0.00 sec)


9)Find all customers who have both an account and a loan at the bank(Use nested
query)

mysql> select Customer_name from Customer 
    -> where Customer_name in (select Customer_name from Borrower)  			//returns all customer names from Borrower table
    -> AND
    -> Customer_name in (select Customer_name from Depositor);				//returns all depositor names from Borrower table
+---------------+
| Customer_name |
+---------------+
| ambuj         |
| rutvij        |
| sourabh       |
+---------------+
3 rows in set (0.00 sec)


10) Find all customers who have both an account and a loan at the SBI branch. (Use
nested query)

mysql> select Customer_name from Customer  
    -> where 
    -> Customer_name in (select Borrower.Customer_name from Borrower,Loan where Borrower.Loan_number = Loan.Loan_number and Loan.Branch_name='SBI') 
    -> AND 
    -> Customer_name in (select Depositor.Customer_name from Depositor,Account where Depositor.Account_number = Account.Account_number and Account.Branch_name='SBI' );

+---------------+
| Customer_name |
+---------------+
| rutvij        |
| ambuj         |
| sourabh       |
+---------------+
3 rows in set (0.00 sec)

11) Find all branches that have greater assets than some branch located in Pune(use
set comparison operator (<some, >=some, <all)

mysql> select distinct T.Branch_name
    -> from Branch as T,Branch as S
    -> where T.assets > S.assets and
    -> S.Branch_city='pune';
+-------------+
| Branch_name |
+-------------+
| Axis        |
| HDFC        |
+-------------+
2 rows in set (0.00 sec)

12) Create any view, perform some DML operations on it and observe the changes in
original tables.


mysql> create VIEW customer_sbi as select Depositor.Customer_name,Depositor.Account_number  ,Account.balance from Depositor,Account where Depositor.Account_number = Account.Account_number and Account.Branch_name='SBI';
Query OK, 0 rows affected (0.01 sec)

mysql> select*from customer_sbi;
+---------------+----------------+---------+
| Customer_name | Account_number | balance |
+---------------+----------------+---------+
| rutvij        | 1              |   10000 |
| ambuj         | 2              |   30000 |
| sanul         | 3              |   35000 |
| sourabh       | 4              |   15000 |
+---------------+----------------+---------+
4 rows in set (0.00 sec)


//dml operations

mysql> update customer_sbi
    -> set balance = 20000
    -> where Account_number = 1;
Query OK, 1 row affected (0.01 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> select*from customer_sbi;
+---------------+----------------+---------+
| Customer_name | Account_number | balance |
+---------------+----------------+---------+
| rutvij        | 1              |   20000 |
| ambuj         | 2              |   30000 |
| sanul         | 3              |   35000 |
| sourabh       | 4              |   15000 |
+---------------+----------------+---------+
4 rows in set (0.00 sec)

mysql> select*from Account;
+----------------+-------------+---------+
| Account_number | Branch_name | balance |
+----------------+-------------+---------+
| 1              | SBI         |   20000 |
| 2              | SBI         |   30000 |
| 3              | SBI         |   35000 |
| 4              | SBI         |   15000 |
| 5              | Axis        |  100000 |
| 6              | Axis        |   20000 |
| 7              | HDFC        |   30000 |
+----------------+-------------+---------+
7 rows in set (0.00 sec)

13) Perform different types of joins like(inner join,outer join,left outer join & Right
Outer Join etc.)

// Inner Join

mysql> select Depositor.Customer_name,Account.balance
    -> from Depositor
    -> inner join Account on Depositor.Account_number = Account.Account_number;
+---------------+---------+
| Customer_name | balance |
+---------------+---------+
| rutvij        |   20000 |
| ambuj         |   30000 |
| sanul         |   35000 |
| sourabh       |   15000 |
| rutvij        |  100000 |
| sanul         |   20000 |
| ambuj         |   30000 |
+---------------+---------+
7 rows in set (0.00 sec)


//left join


mysql> select*from Depositor left join Account on Depositor.Account_number = Account.Account_number;
+---------------+----------------+----------------+-------------+---------+
| Customer_name | Account_number | Account_number | Branch_name | balance |
+---------------+----------------+----------------+-------------+---------+
| rutvij        | 1              | 1              | SBI         |   20000 |
| ambuj         | 2              | 2              | SBI         |   30000 |
| sanul         | 3              | 3              | SBI         |   35000 |
| sourabh       | 4              | 4              | SBI         |   15000 |
| rutvij        | 5              | 5              | Axis        |  100000 |
| sanul         | 6              | 6              | Axis        |   20000 |
| ambuj         | 7              | 7              | HDFC        |   30000 |
+---------------+----------------+----------------+-------------+---------+
7 rows in set (0.00 sec)


//right join

mysql> select*from Account right join Depositor on Account.Account_number = Depositor.Account_number;
+----------------+-------------+---------+---------------+----------------+
| Account_number | Branch_name | balance | Customer_name | Account_number |
+----------------+-------------+---------+---------------+----------------+
| 1              | SBI         |   20000 | rutvij        | 1              |
| 2              | SBI         |   30000 | ambuj         | 2              |
| 3              | SBI         |   35000 | sanul         | 3              |
| 4              | SBI         |   15000 | sourabh       | 4              |
| 5              | Axis        |  100000 | rutvij        | 5              |
| 6              | Axis        |   20000 | sanul         | 6              |
| 7              | HDFC        |   30000 | ambuj         | 7              |
+----------------+-------------+---------+---------------+----------------+
7 rows in set (0.00 sec)

//full join

mysql> select * from Depositor full join Account;
+---------------+----------------+----------------+-------------+---------+
| Customer_name | Account_number | Account_number | Branch_name | balance |
+---------------+----------------+----------------+-------------+---------+
| rutvij        | 1              | 1              | SBI         |   20000 |
| ambuj         | 2              | 1              | SBI         |   20000 |
| sanul         | 3              | 1              | SBI         |   20000 |
| sourabh       | 4              | 1              | SBI         |   20000 |
| rutvij        | 5              | 1              | SBI         |   20000 |
| sanul         | 6              | 1              | SBI         |   20000 |
| ambuj         | 7              | 1              | SBI         |   20000 |
| rutvij        | 1              | 2              | SBI         |   30000 |
| ambuj         | 2              | 2              | SBI         |   30000 |
| sanul         | 3              | 2              | SBI         |   30000 |
| sourabh       | 4              | 2              | SBI         |   30000 |
| rutvij        | 5              | 2              | SBI         |   30000 |
| sanul         | 6              | 2              | SBI         |   30000 |
| ambuj         | 7              | 2              | SBI         |   30000 |
| rutvij        | 1              | 3              | SBI         |   35000 |
| ambuj         | 2              | 3              | SBI         |   35000 |
| sanul         | 3              | 3              | SBI         |   35000 |
| sourabh       | 4              | 3              | SBI         |   35000 |
| rutvij        | 5              | 3              | SBI         |   35000 |
| sanul         | 6              | 3              | SBI         |   35000 |
| ambuj         | 7              | 3              | SBI         |   35000 |
| rutvij        | 1              | 4              | SBI         |   15000 |
| ambuj         | 2              | 4              | SBI         |   15000 |
| sanul         | 3              | 4              | SBI         |   15000 |
| sourabh       | 4              | 4              | SBI         |   15000 |
| rutvij        | 5              | 4              | SBI         |   15000 |
| sanul         | 6              | 4              | SBI         |   15000 |
| ambuj         | 7              | 4              | SBI         |   15000 |
| rutvij        | 1              | 5              | Axis        |  100000 |
| ambuj         | 2              | 5              | Axis        |  100000 |
| sanul         | 3              | 5              | Axis        |  100000 |
| sourabh       | 4              | 5              | Axis        |  100000 |
| rutvij        | 5              | 5              | Axis        |  100000 |
| sanul         | 6              | 5              | Axis        |  100000 |
| ambuj         | 7              | 5              | Axis        |  100000 |
| rutvij        | 1              | 6              | Axis        |   20000 |
| ambuj         | 2              | 6              | Axis        |   20000 |
| sanul         | 3              | 6              | Axis        |   20000 |
| sourabh       | 4              | 6              | Axis        |   20000 |
| rutvij        | 5              | 6              | Axis        |   20000 |
| sanul         | 6              | 6              | Axis        |   20000 |
| ambuj         | 7              | 6              | Axis        |   20000 |
| rutvij        | 1              | 7              | HDFC        |   30000 |
| ambuj         | 2              | 7              | HDFC        |   30000 |
| sanul         | 3              | 7              | HDFC        |   30000 |
| sourabh       | 4              | 7              | HDFC        |   30000 |
| rutvij        | 5              | 7              | HDFC        |   30000 |
| sanul         | 6              | 7              | HDFC        |   30000 |
| ambuj         | 7              | 7              | HDFC        |   30000 |
+---------------+----------------+----------------+-------------+---------+
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ASSIGNMENT MAP REDUCE


6)Explain MapReduce in MongoDB with suitable example.(use various aggregate
functions)

mongo --host 127.0.0.1



>db.createCollection('student')



> db.student.insert({name:'rutvij',marks:100,status:'present'})
WriteResult({ "nInserted" : 1 })
> db.student.insert({name:'rutvij',marks:80,status:'present'})
WriteResult({ "nInserted" : 1 })
> db.student.insert({name:'rutvij',marks:70,status:'present'})
WriteResult({ "nInserted" : 1 })
> db.student.insert({name:'rutvij',marks:35,status:'absent'})
WriteResult({ "nInserted" : 1 })
> db.student.insert({name:'varad',marks:35,status:'absent'})
WriteResult({ "nInserted" : 1 })
> db.student.insert({name:'varad',marks:100,status:'present'})
WriteResult({ "nInserted" : 1 })
> db.student.insert({name:'varad',marks:600,status:'present'})
WriteResult({ "nInserted" : 1 })
> db.student.insert({name:'varad',marks:60,status:'present'})
WriteResult({ "nInserted" : 1 })
> db.student.insert({name:'bodhe',marks:20,status:'absent'})
WriteResult({ "nInserted" : 1 })
> db.student.insert({name:'bodhe',marks:70,status:'present'})
WriteResult({ "nInserted" : 1 })
> db.student.insert({name:'bodhe',marks:90,status:'present'})
WriteResult({ "nInserted" : 1 })
> db.student.insert({name:'malpure',marks:90,status:'present'})
WriteResult({ "nInserted" : 1 })
> db.student.insert({name:'malpure',marks:80,status:'absent'})
WriteResult({ "nInserted" : 1 })



> db.student.find().pretty()
{
	"_id" : ObjectId("5bd2ae84efabf01818bf4465"),
	"name" : "rutvij",
	"marks" : 100,
	"status" : "present"
}
{
	"_id" : ObjectId("5bd2ae8defabf01818bf4466"),
	"name" : "rutvij",
	"marks" : 180,
	"status" : "present"
}
{
	"_id" : ObjectId("5bd2ae92efabf01818bf4467"),
	"name" : "rutvij",
	"marks" : 80,
	"status" : "present"
}
{
	"_id" : ObjectId("5bd2ae97efabf01818bf4468"),
	"name" : "rutvij",
	"marks" : 80,
	"status" : "absent"
}
{
	"_id" : ObjectId("5bd2ae9eefabf01818bf4469"),
	"name" : "varad",
	"marks" : 80,
	"status" : "absent"
}
{
	"_id" : ObjectId("5bd2aea7efabf01818bf446a"),
	"name" : "varad",
	"marks" : 180,
	"status" : "present"
}
{
	"_id" : ObjectId("5bd2aebcefabf01818bf446b"),
	"name" : "bodhe",
	"marks" : 30,
	"status" : "absent"
}
{
	"_id" : ObjectId("5bd2aec9efabf01818bf446c"),
	"name" : "malpure",
	"marks" : 30,
	"status" : "present"
}
{
	"_id" : ObjectId("5bd2aed3efabf01818bf446d"),
	"name" : "malpure",
	"marks" : 130,
	"status" : "absent"
}
{
	"_id" : ObjectId("5bd2aee0efabf01818bf446e"),
	"name" : "bodhe",
	"marks" : 130,
	"status" : "present"
}




> var map = function(){
... emit(this.name,this.marks);
... }


> map
function (){
emit(this.name,this.marks);
}



> var reduce=function(key,marks){
... return Array.sum(marks);
... }


> reduce
function (key,marks){
return Array.sum(marks);
}


> db.student.mapReduce(map,reduce,{out:'total_marks'})
{
	"result" : "total_marks",
	"timeMillis" : 88,
	"counts" : {
		"input" : 10,
		"emit" : 10,
		"reduce" : 4,
		"output" : 4
	},
	"ok" : 1
}


> db.total_marks.find().pretty()
{ "_id" : "bodhe", "value" : 160 }
{ "_id" : "malpure", "value" : 160 }
{ "_id" : "rutvij", "value" : 440 }
{ "_id" : "varad", "value" : 260 }


> db.student.mapReduce(map,reduce,{query:{status:'absent'},out:'absent_marks'})
{
	"result" : "absent_marks",
	"timeMillis" : 45,
	"counts" : {
		"input" : 4,
		"emit" : 4,
		"reduce" : 0,
		"output" : 4
	},
	"ok" : 1
}



> db.absent_marks.find().pretty()
{ "_id" : "bodhe", "value" : 30 }
{ "_id" : "malpure", "value" : 130 }
{ "_id" : "rutvij", "value" : 80 }
{ "_id" : "varad", "value" : 80 }

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ASSIGNMENT 7



> db.createCollection('Teacher_info')
{ "ok" : 1 }



> db.Teacher_info.insert({id:101,name:'bagade',branch:'IT',salary})
2018-10-26T15:58:12.068+0530 E QUERY    [thread1] ReferenceError: salary is not defined :
@(shell):1:58
> db.Teacher_info.insert({id:101,name:'bagade',branch:'IT',salary:25000,status:'A'})
WriteResult({ "nInserted" : 1 })
> db.Teacher_info.insert({id:102,name:'suruchi',branch:'mech',salary:30000,status:'B'})
WriteResult({ "nInserted" : 1 })
> db.Teacher_info.insert({id:103,name:'pathak',branch:'mech',salary:70000,status:'A'})
WriteResult({ "nInserted" : 1 })
> db.Teacher_info.insert({id:104,name:'ghule',branch:'IT',salary:10000,status:'B'})
WriteResult({ "nInserted" : 1 })
> db.Teacher_info.insert({id:105,name:'ratnamala',branch:'comp',salary:30000,status:'B'})
WriteResult({ "nInserted" : 1 })
> db.Teacher_info.insert({id:106,name:'bula',branch:'IT',salary:40000,status:'C'})
WriteResult({ "nInserted" : 1 })




> db.Teacher_info.find().pretty()
{
	"_id" : ObjectId("5bd2ec68df40c9031f224955"),
	"id" : 101,
	"name" : "bagade",
	"branch" : "IT",
	"salary" : 25000,
	"status" : "A"
}
{
	"_id" : ObjectId("5bd2ec80df40c9031f224956"),
	"id" : 102,
	"name" : "suruchi",
	"branch" : "mech",
	"salary" : 30000,
	"status" : "B"
}
{
	"_id" : ObjectId("5bd2ec9adf40c9031f224957"),
	"id" : 103,
	"name" : "pathak",
	"branch" : "mech",
	"salary" : 70000,
	"status" : "A"
}
{
	"_id" : ObjectId("5bd2eccedf40c9031f224958"),
	"id" : 104,
	"name" : "ghule",
	"branch" : "IT",
	"salary" : 10000,
	"status" : "B"
}
{
	"_id" : ObjectId("5bd2ece7df40c9031f224959"),
	"id" : 105,
	"name" : "ratnamala",
	"branch" : "comp",
	"salary" : 30000,
	"status" : "B"
}
{
	"_id" : ObjectId("5bd2ecffdf40c9031f22495a"),
	"id" : 106,
	"name" : "bula",
	"branch" : "IT",
	"salary" : 40000,
	"status" : "C"
}

//1)

> db.Teacher_info.find({salary:{$eq:10000}}).pretty()
{
	"_id" : ObjectId("5bd2eccedf40c9031f224958"),
	"id" : 104,
	"name" : "ghule",
	"branch" : "IT",
	"salary" : 10000,
	"status" : "B"
}


//2)

> db.Teacher_info.find({$or:[{status:'A'},{salary:{$gt:50000}}]}).pretty()
{
	"_id" : ObjectId("5bd2ec68df40c9031f224955"),
	"id" : 101,
	"name" : "bagade",
	"branch" : "IT",
	"salary" : 25000,
	"status" : "A"
}
{
	"_id" : ObjectId("5bd2ec9adf40c9031f224957"),
	"id" : 103,
	"name" : "pathak",
	"branch" : "mech",
	"salary" : 70000,
	"status" : "A"
}


//3)

> db.Teacher_info.find({salary:{$gt:20000}}).pretty()
{
	"_id" : ObjectId("5bd2ec68df40c9031f224955"),
	"id" : 101,
	"name" : "bagade",
	"branch" : "IT",
	"salary" : 25000,
	"status" : "A"
}
{
	"_id" : ObjectId("5bd2ec80df40c9031f224956"),
	"id" : 102,
	"name" : "suruchi",
	"branch" : "mech",
	"salary" : 30000,
	"status" : "B"
}
{
	"_id" : ObjectId("5bd2ec9adf40c9031f224957"),
	"id" : 103,
	"name" : "pathak",
	"branch" : "mech",
	"salary" : 70000,
	"status" : "A"
}
{
	"_id" : ObjectId("5bd2ece7df40c9031f224959"),
	"id" : 105,
	"name" : "ratnamala",
	"branch" : "comp",
	"salary" : 30000,
	"status" : "B"
}
{
	"_id" : ObjectId("5bd2ecffdf40c9031f22495a"),
	"id" : 106,
	"name" : "bula",
	"branch" : "IT",
	"salary" : 40000,
	"status" : "C"
}

//4)

> db.Teacher_info.find({status:'A'}).pretty().sort({salary:1})
{
	"_id" : ObjectId("5bd2ec68df40c9031f224955"),
	"id" : 101,
	"name" : "bagade",
	"branch" : "IT",
	"salary" : 25000,
	"status" : "A"
}
{
	"_id" : ObjectId("5bd2ec9adf40c9031f224957"),
	"id" : 103,
	"name" : "pathak",
	"branch" : "mech",
	"salary" : 70000,
	"status" : "A"
}

//5)

> db.Teacher_info.find().count()
6

	
//6)

> db.Teacher_info.updateMany( { "salary":{$gt:20000} }, { $set:{"branch":'Entc'} } )  				//if updateMany doesnt work insert->  ,{multi:true} after set bracket
{ "acknowledged" : true, "matchedCount" : 6, "modifiedCount" : 5 }


> db.Teacher_info.find()
{ "_id" : ObjectId("5bd2ec68df40c9031f224955"), "id" : 101, "name" : "bagade", "branch" : "Entc", "salary" : 55000, "status" : "A" }
{ "_id" : ObjectId("5bd2ec80df40c9031f224956"), "id" : 102, "name" : "suruchi", "branch" : "Entc", "salary" : 30000, "status" : "B" }
{ "_id" : ObjectId("5bd2ec9adf40c9031f224957"), "id" : 103, "name" : "pathak", "branch" : "Entc", "salary" : 80000, "status" : "A" }
{ "_id" : ObjectId("5bd2eccedf40c9031f224958"), "id" : 104, "name" : "ghule", "branch" : "Entc", "salary" : 10000, "status" : "B" }
{ "_id" : ObjectId("5bd2ece7df40c9031f224959"), "id" : 105, "name" : "ratnamala", "branch" : "Entc", "salary" : 30000, "status" : "B" }
{ "_id" : ObjectId("5bd2ecffdf40c9031f22495a"), "id" : 106, "name" : "bula", "branch" : "Entc", "salary" : 40000, "status" : "C" }
{ "_id" : ObjectId("5bd2fa23df40c9031f22495b"), "id" : 107, "name" : "rutvij", "branch" : "Entc", "salary" : 400000, "status" : "A+" }



//7)

> db.Teacher_info.updateMany( { status:"A" }, { $inc:{salary:10000} } )
WriteResult({ "nMatched" : 2, "nUpserted" : 0, "nModified" : 2 })


//8)

> db.Teacher_info.update(
... {name:'bagade'},
... {$unset:{salary:""}}
... )
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.Teacher_info.find()
{ "_id" : ObjectId("5bd2ec68df40c9031f224955"), "id" : 101, "name" : "bagade", "branch" : "Entc", "status" : "A" }
{ "_id" : ObjectId("5bd2ec80df40c9031f224956"), "id" : 102, "name" : "suruchi", "branch" : "Entc", "salary" : 30000, "status" : "B" }
{ "_id" : ObjectId("5bd2ec9adf40c9031f224957"), "id" : 103, "name" : "pathak", "branch" : "Entc", "salary" : 80000, "status" : "A" }
{ "_id" : ObjectId("5bd2eccedf40c9031f224958"), "id" : 104, "name" : "ghule", "branch" : "Entc", "salary" : 10000, "status" : "B" }
{ "_id" : ObjectId("5bd2ece7df40c9031f224959"), "id" : 105, "name" : "ratnamala", "branch" : "Entc", "salary" : 30000, "status" : "B" }
{ "_id" : ObjectId("5bd2ecffdf40c9031f22495a"), "id" : 106, "name" : "bula", "branch" : "Entc", "salary" : 40000, "status" : "C" }
{ "_id" : ObjectId("5bd2fa23df40c9031f22495b"), "id" : 107, "name" : "rutvij", "branch" : "Entc", "salary" : 400000, "status" : "A+" }


//9)

> db.Teacher_info.remove({id:105})
{ "acknowledged" : true, "deletedCount" : 1 }
> db.Teacher_info.find()
{ "_id" : ObjectId("5bd2ec68df40c9031f224955"), "id" : 101, "name" : "bagade", "branch" : "Entc", "status" : "A" }
{ "_id" : ObjectId("5bd2ec80df40c9031f224956"), "id" : 102, "name" : "suruchi", "branch" : "Entc", "salary" : 30000, "status" : "B" }
{ "_id" : ObjectId("5bd2ec9adf40c9031f224957"), "id" : 103, "name" : "pathak", "branch" : "Entc", "salary" : 80000, "status" : "A" }
{ "_id" : ObjectId("5bd2eccedf40c9031f224958"), "id" : 104, "name" : "ghule", "branch" : "Entc", "salary" : 10000, "status" : "B" }
{ "_id" : ObjectId("5bd2ecffdf40c9031f22495a"), "id" : 106, "name" : "bula", "branch" : "Entc", "salary" : 40000, "status" : "C" }
{ "_id" : ObjectId("5bd2fa23df40c9031f22495b"), "id" : 107, "name" : "rutvij", "branch" : "Entc", "salary" : 400000, "status" : "A+" }



//10)

to drop collection type,

db.Teacher_info.drop()


//11)

to drop database type,

db.dropDatabase()
====================================================================================================================================================================
TRIGGER

mysql> create table employee(
    -> emp_id int,
    -> name varchar(20),
    -> qual varchar(20),
    -> desg varchar(20),
    -> dept varchar(20),
    -> salary int,phone_no int,city varchar(20));
Query OK, 0 rows affected (0.71 sec)





mysql> create table emp_backup(
    -> emp_id int,
    -> name varchar(20),
    -> qual varchar(20),
    -> desg varchar(20),
    -> dept varchar(20),
    -> salary int,phone_no int,city varchar(20));
Query OK, 0 rows affected (0.71 sec)



mysql> create trigger backup after insert on employee for each row insert into 
     emp_backup set emp_id=new.emp_id,name=new.name,dept=new.dept,salary=new.salary;
Query OK, 0 rows affected (0.17 sec)


mysql> insert into employee values(8,'sita','SE','CEO','IT',20000,57904274,'pune');
Query OK, 1 row affected (0.08 sec)


mysql> select * from emp_backup;
+--------+------+------+------+------+--------+----------+------+
| emp_id | name | qual | desg | dept | salary | phone_no | city |
+--------+------+------+------+------+--------+----------+------+
|      8 | sita | NULL | NULL | IT   |  20000 |     NULL | NULL |




==========================================================================================================================================================================================
ASSIGNMENT 5


1)Find the loan number of those loans with loan amounts between Rs. 900 and Rs.1200 .

mysql> select Loan_number from Loan where amount > 900 and amount < 1200;
+-------------+
| Loan_number |
+-------------+
|         100 |
+-------------+
1 row in set (0.00 sec)


2)Find the name, loan number and loan amount of all customer having a loan at the SBI
branch.

mysql> select Borrower.Customer_name,Borrower.Loan_number,Loan.amount
    -> from Borrower,Loan
    -> where Loan.Branch_name='SBI' AND Borrower.Loan_number = Loan.Loan_number;
+---------------+-------------+--------+
| Customer_name | Loan_number | amount |
+---------------+-------------+--------+
| rutvij        |         100 |   1000 |	
| ambuj         |         101 |  10000 |
| sourabh       |         102 |   2000 |
+---------------+-------------+--------+
3 rows in set (0.00 sec)


3)Find the customer names and their loan numbers for all customers having a loan at some branch.

mysql> SELECT Borrower.Customer_name,Borrower.Loan_number from Borrower,Loan where Borrower.Loan_number = Loan.Loan_number;
+---------------+-------------+
| Customer_name | Loan_number |
+---------------+-------------+
| rutvij        |         100 |
| ambuj         |         101 |
| sourabh       |         102 |
+---------------+-------------+
3 rows in set (0.00 sec)

4) Find the names of all customers whose street includes the substring “kothrud”.

mysql> select Customer_name from Customer where Locate('kothrud',Customer_street) != 0;
+---------------+
| Customer_name |
+---------------+
| rutvij        |
+---------------+


//OR

mysql> select Customer_name from Customer where Customer_street like '%kothrud%';
+---------------+
| Customer_name |
+---------------+
| rutvij        |
+---------------+
1 row in set (0.00 sec)


5)List in alphabetic order the names of all customers having a loan in SBI branch.

mysql> SELECT Borrower.Customer_name,Borrower.Loan_number from Borrower,Loan where Borrower.Loan_number = Loan.Loan_number and Loan.Branch_name = 'SBI' order by Borrower.Customer_name ASC;
+---------------+-------------+
| Customer_name | Loan_number |
+---------------+-------------+
| ambuj         |         101 |
| rutvij        |         100 |
| sourabh       |         102 |
+---------------+-------------+
3 rows in set (0.00 sec)


6) Find all customers who have a loan, an account, or both.

mysql> select Depositor.Customer_name from Depositor
    -> Union all 						//display Duplicate entries too
    -> select Borrower.Customer_name from Borrower;

+---------------+
| Customer_name |
+---------------+
| ambuj         |
| ambuj         |
| rutvij        |
| rutvij        |
| sanul         |
| sanul         |
| sourabh       |
| ambuj         |
| rutvij        |
| sourabh       |
+---------------+
10 rows in set (0.00 sec)

mysql> select Depositor.Customer_name from Depositor
    -> Union 							//NO repeated or Duplicate Entries
    -> select Borrower.Customer_name from Borrower; 

+---------------+
| Customer_name |
+---------------+
| ambuj         |
| rutvij        |
| sanul         |
| sourabh       |
+---------------+
4 rows in set (0.00 sec)

7) Find all customers who have both a loan and an account

mysql> select distinct Depositor.Customer_name from Depositor inner join  Borrower on Depositor.Customer_name = Borrower.Customer_name;
+---------------+
| Customer_name |
+---------------+
| ambuj         |
| rutvij        |
| sourabh       |
+---------------+
3 rows in set (0.00 sec)


9) Find the number of depositors for each branch.

mysql> select count(Account_number),Branch_name from Account Group by Branch_name;
+-----------------------+-------------+
| count(Account_number) | Branch_name |
+-----------------------+-------------+
|                     2 | Axis        |
|                     1 | HDFC        |
|                     4 | SBI         |
+-----------------------+-------------+
3 rows in set (0.00 sec)

10) Find the names of all branches where the average account balance is more than Rs.1,200.

mysql> select Branch_name,AVG(balance) from Account GROUP BY Branch_name having AVG(balance) > 1200;
+-------------+--------------+
| Branch_name | AVG(balance) |
+-------------+--------------+
| Axis        |   60000.0000 |
| HDFC        |   30000.0000 |
| SBI         |   22500.0000 |
+-------------+--------------+
3 rows in set (0.00 sec)


12) Find all customers who have both an account and a loan at the SBI branch. (Use
nested query)

mysql> select Customer_name from Customer  
    -> where 
    -> Customer_name in (select Borrower.Customer_name from Borrower,Loan where Borrower.Loan_number = Loan.Loan_number and Loan.Branch_name='SBI') 
    -> AND 
    -> Customer_name in (select Depositor.Customer_name from Depositor,Account where Depositor.Account_number = Account.Account_number and Account.Branch_name='SBI' );

+---------------+
| Customer_name |
+---------------+
| rutvij        |
| ambuj         |
| sourabh       |
+---------------+
3 rows in set (0.00 sec)


14)Find all branches that have greater assets than some branch located in SBI.

mysql> select distinct T.Branch_name
    -> from Branch as T,Branch as S
    -> where T.assets > S.assets and
    -> S.Branch_city='pune';
+-------------+
| Branch_name |
+-------------+
| Axis        |
| HDFC        |
+-------------+
2 rows in set (0.00 sec)

========================================================================================================================================================================ASSIGNMENT @


// 2 PLSQL function




mysql> select *from student;
+-----+------------+------+------+------+-------+---------+-------------+
| rno | name       | sub1 | sub2 | sub3 | total | average | grade       |
+-----+------------+------+------+------+-------+---------+-------------+
|   1 | Rutvij     |   90 |   92 |   96 |  NULL |    NULL | NULL 	|
|   2 | Amogh      |   88 |   82 |   96 |  NULL |    NULL | NULL 	|
|   3 | Hrushikesh |   78 |   82 |   36 |  NULL |    NULL | NULL 	|
|   4 | Varad      |   48 |   82 |   96 |  NULL |    NULL | NULL	|
|   5 | Bodhe      |   78 |   72 |   76 |  NULL |    NULL | NULL        |
|   6 | kshitij    |   89 |   78 |   78 |  NULL |    NULL | NULL        |
+-----+------------+------+------+------+-------+---------+-------------+
6 rows in set (0.00 sec)


// create the above table and insert only rno (starting from 1,2,3.....) ,name , sub1 ,sub2, sub3

// (Q2 B) create average function first so it could be used in grade function

mysql> create function average(sub1 int,sub2 int,sub3 int)  returns int
    -> begin
    -> declare total int;
    -> declare average int;
    -> set total = sub1 + sub2 + sub3;
    -> set average = total/3;
    -> return average;
    -> end $$
Query OK, 0 rows affected (0.00 sec)


mysql> delimiter ;


mysql> select rno,name,average(sub1,sub2,sub3) from student; 
+-----+------------+-------------------------+
| rno | name       | average(sub1,sub2,sub3) |
+-----+------------+-------------------------+
|   1 | Rutvij     |                      93 |
|   2 | Amogh      |                      89 |
|   3 | Hrushikesh |                      65 |
|   4 | Varad      |                      75 |
|   5 | Bodhe      |                      75 |
|   6 | kshitij    |                      82 |
+-----+------------+-------------------------+
6 rows in set (0.00 sec)

// Q2 A

mysql> delimiter $$

mysql> create function grade (sub1 int,sub2 int, sub3 int)
    -> returns varchar(50)
    -> begin
    -> declare grade varchar(50);
    -> declare average int;
    -> set average = average(sub1,sub2,sub3);
    -> if average <50 then set grade ='F';end if;
    -> if average >50 && average <60 then set grade ='D';end if;
    -> if average >60 && average <70 then set grade ='C';end if;
    -> if average >50 && average <80 then set grade ='C';end if;
    -> if average >80 then set grade ='A';end if;
    -> return grade;
    -> end $$

mysql> delimiter ;

mysql> select rno,name,average(sub1,sub2,sub3),grade(sub1,sub2,sub3) from student;
+-----+------------+-------------------------+-----------------------+
| rno | name       | average(sub1,sub2,sub3) | grade(sub1,sub2,sub3) |
+-----+------------+-------------------------+-----------------------+
|   1 | Rutvij     |                      93 | A                     |
|   2 | Amogh      |                      89 | A                     |
|   3 | Hrushikesh |                      65 | C                     |
|   4 | Varad      |                      75 | C                     |
|   5 | Bodhe      |                      75 | C                     |
|   6 | kshitij    |                      82 | A                     |
+-----+------------+-------------------------+-----------------------+
6 rows in set (0.00 sec)


==========================================================================================================================================================	
ASSIGMENT 1


	
	
	

//procedure (#cursor )



mysql> select *from student;
+-----+------------+------+------+------+-------+---------+-------------+
| rno | name       | sub1 | sub2 | sub3 | total | average | grade       |
+-----+------------+------+------+------+-------+---------+-------------+
|   1 | Rutvij     |   90 |   92 |   96 |  NULL |    NULL | NULL 	|
|   2 | Amogh      |   88 |   82 |   96 |  NULL |    NULL | NULL 	|
|   3 | Hrushikesh |   78 |   82 |   36 |  NULL |    NULL | NULL 	|
|   4 | Varad      |   48 |   82 |   96 |  NULL |    NULL | NULL	|
|   5 | Bodhe      |   78 |   72 |   76 |  NULL |    NULL | NULL        |
|   6 | kshitij    |   89 |   78 |   78 |  NULL |    NULL | NULL        |
+-----+------------+------+------+------+-------+---------+-------------+
6 rows in set (0.00 sec)


// create the above table and insert only rno (starting from 1,2,3.....) ,name , sub1 ,sub2, sub3


mysql> delimiter $$



mysql> create procedure result2()
    -> begin
    -> declare prno int;
    -> declare pname varchar(50);
    -> declare psub1 int;
    -> declare psub2 int;
    -> declare psub3 int;
    -> declare ptotal int;
    -> declare paverage int;
    -> declare pgrade varchar(50);
    -> declare i int;
    -> declare done int default false;
    -> declare scursor cursor for select rno,name,sub1,sub2,sub3 from student;
    -> declare continue handler for not found set done = true;
    -> set i=1;
    -> open scursor;
    -> readnextrow:loop
    -> fetch scursor into prno,pname,psub1,psub2,psub3;
    -> if done then
    -> leave readnextrow;
    -> end if;
    -> set ptotal =psub1+psub2+psub3;
    -> set paverage =ptotal/3;
    -> if paverage >80 then set pgrade ='A';
    -> end if;
    -> if paverage>70 && paverage <80 then set pgrade ='B';end if;
    -> if paverage>60 && paverage <70 then set pgrade ='C';end if;
    -> if paverage>50 && paverage <60 then set pgrade ='D';end if;
    -> if paverage <50 then set pgrade ='F';end if;
    -> update student set total=ptotal,average=paverage,grade=pgrade where rno=i;
    -> set i=i+1;
    -> end loop;
    -> close scursor;
    -> end $$

mysql> delimiter ;

mysql> call result2();

mysql> select * from student;
+-----+------------+------+------+------+-------+---------+-------+
| rno | name       | sub1 | sub2 | sub3 | total | average | grade |
+-----+------------+------+------+------+-------+---------+-------+
|   1 | Rutvij     |   90 |   92 |   96 |   278 |      93 | A     |
|   2 | Amogh      |   88 |   82 |   96 |   266 |      89 | A     |
|   3 | Hrushikesh |   78 |   82 |   36 |   196 |      65 | C     |
|   4 | Varad      |   48 |   82 |   96 |   226 |      75 | B     |
|   5 | Bodhe      |   78 |   72 |   76 |   226 |      75 | B     |
|   6 | kshitij    |   89 |   78 |   78 |   245 |      82 | A     |
+-----+------------+------+------+------+-------+---------+-------+
6 rows in set (0.00 sec)


